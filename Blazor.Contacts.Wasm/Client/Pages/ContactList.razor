@page "/"

@inject IContactService ContactService
@inject NavigationManager NavegationManager

<h3>Contacts</h3>
@message

<table class="table">
   <tbody>
       <tr>
           <td colspan="2"><a href="/contactdetails"> Add new</a></td>
       </tr>
   </tbody> 
</table>


@if(contacts == null)
{
 <p><em>Loading .....</em></p>
}
else
{
<RadzenGrid AllowFiltering="true"  FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
FilterMode="FilterMode.Advanced" AllowPaging="true" PageSize="4" AllowSorting="true" Data="@contacts" TItem="Contact" ColumnWidth="200px" >
   <Columns>
       <RadzenGridColumn TItem="Contact" Property="FullName" Title="Name"></RadzenGridColumn>
       <RadzenGridColumn TItem="Contact" Property="Phone" Title="Phone"></RadzenGridColumn>
       <RadzenGridColumn TItem="Contact" Property="Address" Title="Address"></RadzenGridColumn>
         <RadzenGridColumn TItem="Contact"  Title="Edit">
             <Template Context="data">
                 <RadzenLink Path="@($"/contactdetails/{data.Id}")" Text="Edit"></RadzenLink>
             </Template>
         </RadzenGridColumn>

           <RadzenGridColumn TItem="Contact"  Title="Delete">
             <Template Context="data">
                 <RadzenLink Path="@($"/contactdelete/{data.Id}")" Text="Delete"></RadzenLink>
             </Template>
         </RadzenGridColumn>
       
   </Columns>
    
</RadzenGrid>
@*<table class ="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Phone</th>
            <th>Address</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var contact in contacts)
        {
           <tr>
               <td>@contact.FullName</td>
               <td>@contact.Phone</td>
               <td>@contact.Address</td>
               <td><a href="/contactdetails/@contact.Id">Edit</a></td>
                <td><a href="/contactdelete/@contact.Id">Delete</a></td>
               <td></td>
           </tr>
        }
    </tbody>   
</table>*@
}
@code {
    IEnumerable<Contact> contacts; 
    public string message { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            contacts = await ContactService.GetAll();
        }
        catch(Exception e)
        {
            message = "Error ....." + e.Message;
        }
    }

}
